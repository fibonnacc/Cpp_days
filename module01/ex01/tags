!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/helfatih/Documents/C++/module01/ex01/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$(NAME)	Makefile	/^$(NAME): $(OBJ)$/;"	t
%.o	Makefile	/^%.o: %.cpp$/;"	t
CC	Makefile	/^CC = c++$/;"	m
N	Zombie.hpp	/^    int N;$/;"	m	class:Zombie	typeref:typename:int
NAME	Makefile	/^NAME = cpp$/;"	m
OBJ	Makefile	/^OBJ = $(SRC:.cpp=.o)$/;"	m
SRC	Makefile	/^SRC = main.cpp	Zombie.cpp	zombieHorde.cpp$/;"	m
ZOMBIE_HPP	Zombie.hpp	/^#define ZOMBIE_HPP$/;"	d
Zombie	Zombie.hpp	/^  Zombie()$/;"	f	class:Zombie
Zombie	Zombie.hpp	/^class Zombie$/;"	c
all	Makefile	/^all: $(NAME)$/;"	t
announce	Zombie.cpp	/^void  Zombie::announce()$/;"	f	class:Zombie	typeref:typename:void
clean	Makefile	/^clean:$/;"	t
fclean	Makefile	/^fclean: clean$/;"	t
main	main.cpp	/^int main ()$/;"	f	typeref:typename:int
name	Zombie.hpp	/^    std::string name;$/;"	m	class:Zombie	typeref:typename:std::string
re	Makefile	/^re: fclean all$/;"	t
set_Zombie	Zombie.hpp	/^  void   set_Zombie(std::string name)$/;"	f	class:Zombie	typeref:typename:void
zombieHorde	zombieHorde.cpp	/^Zombie* zombieHorde( int N, std::string name )$/;"	f	typeref:typename:Zombie *
~Zombie	Zombie.hpp	/^  ~Zombie()$/;"	f	class:Zombie
